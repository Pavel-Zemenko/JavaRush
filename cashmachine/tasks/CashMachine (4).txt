CashMachine (4)

1. Выберем операцию, с которой мы сможем начать.
   Подумаем. В банкомате ещё денег нет, поэтому INFO и WITHDRAW протестить не получится.
   Начнём с операции DEPOSIT - поместить деньги.
   Считаем с консоли код валюты, потом считаем номинал и количество банкнот,
   а потом добавим их в манипулятор.

2. Чтобы считать код валюты, добавим статический метод String askCurrencyCode()
   в ConsoleHelper. Этот метод должен предлагать пользователю ввести код валюты,
   проверять, что код содержит 3 символа. Если данные некорректны, то сообщить об этом
   пользователю и повторить. Если данные валидны, то перевести код в верхний регистр и вернуть.

3. Чтобы считать номинал и количество банкнот, добавим статический метод
   String[] getValidTwoDigits(String currencyCode) в ConsoleHelper.
   Этот метод должен предлагать пользователю ввести два целых положительных числа.
   Первое число - номинал, второе - количество банкнот.
   Никаких валидаторов на номинал нет. Т.е. 1200 - это нормальный номинал.
   Если данные некорректны, то сообщить об этом пользователю и повторить.

   Пример вводимых данных:
   200 5

4. В классе CurrencyManipulator создай метод void addAmount(int denomination, int count),
   который добавит введённые номинал и количество банкнот.

5. Пора уже увидеть приложение в действии.
   В методе main захардкодь логику пункта 1.
   Кстати, чтобы не было проблем с тестами на стороне сервера, добавь в метод main
   первой строчкой Locale.setDefault(Locale.ENGLISH);
   Запускаем, дебажим, смотрим.


Требования:

    Класс ConsoleHelper должен иметь статический метод
    String askCurrencyCode().

    Класс ConsoleHelper должен иметь статический метод
    String[] getValidTwoDigits(String currencyCode).

    Класс CurrencyManipulator должен иметь метод
    void addAmount(int denomination, int count).

    Метод main класса CashMachine должен считывать с консоли код валюты,
    потом считывать номинал и количество банкнот, а потом добавлять их в манипулятор.